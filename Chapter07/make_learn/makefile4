TARGET = mySort
CFLAGS = -g -O2 -Wall -Werror -pipe -m64  # c编译选项
CXXFLAGS = -g -O2 -Wall -Werror -pipe -m64 -std=c++11  # c++编译选项
LDFLAGS =  # 连接选项
INCFLAGS =  # 头文件目录
SRCDIRS = . # 源文件目录
ALONE_SOURCES =  # 单独的源文件

CC = gcc  # c编译器
CXX = g++  # c++编译器
SRCEXTS = .c .C .cc .cpp .CPP .c++ .cxx .cp  # 源文件类型扩展：c后缀的为c源文件，其他的为c++源文件
HDREXTS = .h .H .hh .hpp .HPP .h++ .hxx .hp  # 头文件类型扩展

ifeq ($(TARGET),)  # 如果TARGET为空，则取当前目录的basename作为目标名词
	TARGET = $(shell basename $(CURDIR))  # 取当前路径名中最后一个名词，CURDIR是make的内置变量，自动会被设置为当前目录
	ifeq ($(TARGET),)
		TARGET = a.out
	endif
endif
ifeq ($(SRCDIRS),)  # 如果源文件目录为空，则默认当前目录为源文件目录
	SRCDIRS = .
endif

# foreach函数用于遍历源文件目录，针对每个目录再调用addprefix函数添加目录前缀，生成各种指定源文件后缀类型的通用匹配模式（类似正则表达式）
# 使用wildcard函数对每个目录下文件，进行通配符扩展，最后得到所有的TARGET依赖的源文件列表，保存到SOURCES中
SOURCES = $(foreach d,$(SRCDIRS),$(wildcard $(addprefix $(d)/*,$(SRCEXTS))))
SOURCES += $(ALONE_SOURCES)
# 和上面的SOURCES类似
HEADERS = $(foreach d,$(SRCDIRS),$(wildcard $(addprefix $(d)/*,$(HDREXTS))))
SRC_CXX = $(filter-out %.c,$(SOURCES))  # 过滤掉c语言相关的源文件，这个后续用于判断时采用c编译还是c++编译
# 目标文件列表，先调用basename函数取源文件的前缀，然后再调用addsuffix函数添加.o的后缀
OBJS = $(addsuffix .o, $(basename $(SOURCES)))
# 定义编译和链接使用的变量
COMPILE.c   = $(CC)  $(CFLAGS)   $(INCFLAGS) -c
COMPILE.cxx = $(CXX) $(CXXFLAGS) $(INCFLAGS) -c
LINK.c      = $(CC)  $(CFLAGS)
LINK.cxx    = $(CXX) $(CXXFLAGS)

all: $(TARGET)  # all生成的依赖规则，就是用于生成TARGET
objs: $(OBJS) # objs生成的依赖规则，就是用于生成各个链接使用的目标文件
.PHONY: all objs clean help debug

# 下面的是生成目标文件的通用规则
%.o:%.c
	$(COMPILE.c) $< -o $@
%.o:%.C
	$(COMPILE.cxx) $< -o $@
%.o:%.cc
	$(COMPILE.cxx) $< -o $@
%.o:%.cpp
	$(COMPILE.cxx) $< -o $@
%.o:%.CPP
	$(COMPILE.cxx) $< -o $@
%.o:%.c++
	$(COMPILE.cxx) $< -o $@
%.o:%.cp
	$(COMPILE.cxx) $< -o $@
%.o:%.cxx
	$(COMPILE.cxx) $< -o $@

$(TARGET): $(OBJS)  # 最终目标文件的依赖规则
ifeq ($(SRC_CXX),)              # c程序
	$(LINK.c)   $(OBJS) -o $@ $(LDFLAGS)
	@echo Type $@ to execute the program.
else                            # c++程序
	$(LINK.cxx) $(OBJS) -o $@ $(LDFLAGS)
	@echo Type $@ to execute the program.
endif

clean:
	rm $(OBJS) $(TARGET)
help:
	@echo '通用makefile用于编译c/c++程序 版本号1.0'
	@echo
	@echo 'Usage: make [TARGET]'
	@echo 'TARGETS:'
	@echo '  all       (等于直接执行make) 编译并连接'
	@echo '  objs      只编译不连接'
	@echo '  clean     清除目标文件和可执行文件'
	@echo '  debug     显示变量，用于调试'
	@echo '  help      显示帮助信息'
	@echo
debug:
	@echo 'TARGET       :' 	$(TARGET)
	@echo 'SRCDIRS      :'	$(SRCDIRS)
	@echo 'SOURCES      :'	$(SOURCES)
	@echo 'HEADERS      :'	$(HEADERS)
	@echo 'SRC_CXX      :'	$(SRC_CXX)
	@echo 'OBJS         :' 	$(OBJS)
	@echo 'COMPILE.c    :' 	$(COMPILE.c)
	@echo 'COMPILE.cxx  :' 	$(COMPILE.cxx)
	@echo 'LINK.c       :' 	$(LINK.c)
	@echo 'LINK.cxx     :' 	$(LINK.cxx)